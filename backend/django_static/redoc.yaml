openapi: 3.0.2
info:
  title: User and Authentication API
  version: 0.0.1
  description: |
    API для управления пользователями и аутентификации. Включает следующие функции:
    - Регистрация пользователя (email, номер телефона)
    - Аутентификация и выдача JWT токена
    - Обновление токена
    - Получение списка пользователей (только для авторизованных пользователей)
    - Получение информации о пользователе (для авторизованного пользователя)
    - Редактирование и удаление своего аккаунта
    - Администраторы могут удалять или редактировать любой аккаунт

servers:
  - url: http://127.0.0.1/api/v1/
    description: Локальный сервер

paths:
  /auth/register/:
    post:
      summary: Регистрация пользователя
      description: Создает нового пользователя в системе в зависимости от типа устройства.
      security:
        - not_required:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/MailUser'
                - $ref: '#/components/schemas/MobileUser'
                - $ref: '#/components/schemas/WebUser'
      responses:
        '200':
          description: Успешная регистрация пользователя
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Неправильный запрос (некорректные данные)

  /auth/token/:
    post:
      summary: Получение токена
      description: Аутентификация пользователя по email или номеру телефона.
      security:
        - not_required:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRequest'
      responses:
        '200':
          description: Успешная аутентификация и получение токена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '401':
          description: Неправильные учетные данные

  /auth/token/refresh/:
    post:
      summary: Обновление токена
      description: Обновление токена доступа по рефреш-токену.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh:
                  type: string
                  description: Рефреш-токен
      responses:
        '200':
          description: Успешное обновление токена
          content:
            application/json:
              schema:
                type: object
                properties:
                  access:
                    type: string
                    description: Новый токен доступа
        '401':
          description: Неправильные учетные данные

  /users/:
    get:
      summary: Список пользователей
      description: Возвращает список всех пользователей с возможностью поиска по полям. Только авторизованные пользователи могут просматривать список пользователей.
      security:
        - jwt-token:
          - read:admin,user
      parameters:
        - name: search
          in: query
          description: Поля для поиска (фамилия, имя, отчество, номер телефона, email).
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Успешный запрос, возвращает список пользователей
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Неавторизованный доступ. Необходимо предоставить валидный JWT токен.

  /users/{id}/:
    get:
      summary: Получение информации о пользователе
      description: Возвращает детальную информацию о пользователе. Доступно авторизованным пользователям.
      security:
        - jwt-token:
          - read:admin,user
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID пользователя
      responses:
        '200':
          description: Успешный запрос, возвращает данные пользователя
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Неавторизованный доступ. Необходимо предоставить валидный JWT токен.
        '404':
          description: Пользователь не найден

    put:
      summary: Обновление информации о пользователе
      description: Полное обновление информации о пользователе по его ID. Доступно только администратору или владельцу аккаунта.
      security:
        - jwt-token:
          - write:admin,user
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID пользователя
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Успешное обновление пользователя
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Некорректные данные
        '401':
          description: Неавторизованный доступ. Необходимо предоставить валидный JWT токен.
        '404':
          description: Пользователь не найден

    patch:
      summary: Частичное обновление информации о пользователе
      description: Частичное обновление информации о пользователе по его ID. Доступно только администратору или владельцу аккаунта.
      security:
        - jwt-token:
          - write:admin,user
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID пользователя
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Успешное обновление пользователя
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Некорректные данные
        '401':
          description: Неавторизованный доступ. Необходимо предоставить валидный JWT токен.
        '404':
          description: Пользователь не найден

    delete:
      summary: Удаление пользователя
      description: Удаляет пользователя по его ID. Доступно только администратору и владельцу аккаунта.
      security:
        - jwt-token:
            - write:admin,user
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID пользователя
      responses:
        '204':
          description: Пользователь успешно удален
        '401':
          description: Неавторизованный доступ. Необходимо предоставить валидный JWT токен.
        '404':
          description: Пользователь не найден

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
          format: email
        last_name:
          type: string
        first_name:
          type: string
        middle_name:
          type: string
        date_of_birth:
          type: string
          format: date
        passport_number:
          type: string
        place_of_birth:
          type: string
        phone_number:
          type: string
        registration_address:
          type: string
        residence_address:
          type: string
    UserPayload:
      type: object
      properties:
        email:
          type: string
          format: email
        last_name:
          type: string
        first_name:
          type: string
        middle_name:
          type: string
        date_of_birth:
          type: string
          format: date
        passport_number:
          type: string
        place_of_birth:
          type: string
        phone_number:
          type: string
        registration_address:
          type: string
        residence_address:
          type: string
        password:
          type: string

    TokenRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          nullable: true
        phone_number:
          type: string
          nullable: true
        password:
          type: string
      required:
        - password
      oneOf:
        - required:
            - email
        - required:
            - phone_number

    TokenResponse:
      type: object
      properties:
        refresh:
          type: string
        access:
          type: string
        user:
          $ref: '#/components/schemas/User'

    MailUser:
      allOf:
        - $ref: '#/components/schemas/UserPayload'
        - type: object
          properties:
            email:
              type: string
              format: email
            first_name:
              type: string
          required:
            - email
            - first_name
            - password

    MobileUser:
      allOf:
        - $ref: '#/components/schemas/UserPayload'
        - type: object
          properties:
            phone_number:
              type: string
          required:
            - phone_number
            - password

    WebUser:
      allOf:
        - $ref: '#/components/schemas/UserPayload'
        - type: object

          required:
            - last_name
            - first_name
            - middle_name
            - date_of_birth
            - passport_number
            - place_of_birth
            - phone_number
            - registration_address
            - password
  securitySchemes:
    jwt-token:
      type: apiKey
      description: Аутентификация с помощью JWT токенов
      name: Bearer
      in: header
    not_required:
      description: Доступ для любого пользователя
